#!/usr/local/bin/perl

# The start of a gimme5 replacement based on STD parsing.
#
use strict;
use 5.010;
use warnings;

use STD;
use utf8;
use YAML::XS;

my $OPT_pos = 0;
my $OPT_match = 0;
my $OPT_log = 0;
my $OPT_stab = 0;
my $PROG = '';
my @did_ws;

my @context;

sub USAGE {
    print <<'END';
viv [switches] filename
    where switches can be:
    	-e	use following argument as program
    	--ast	spit out an abstract syntax tree (default)
    	--p5	spit out a Perl 5 representation (unimpl)
    	--p6	spit out a Perl 6 representation (partially impl)
    	--stab	include the symbol table
    	--pos	include position info in AST
    	--match	include match tree info in AST
    	--log	emit debugging info to standard error
END
    exit;
}


sub MAIN {
    my $output = 'ast';

    USAGE() unless @_;
    while (@_) {
	last unless $_[0] =~ /^-/;
	my $switch = shift @_;
	if ($switch eq '--eval' or $switch eq '-e') {
	    $PROG .= shift(@_) . "\n";
	}
	elsif ($switch eq '--ast' or $switch eq '-a') {
	    $output = 'ast';
	}
	elsif ($switch eq '--p5' or $switch eq '-5') {
	    $output = 'p5';
	    $OPT_pos = 1;
	}
	elsif ($switch eq '--p6' or $switch eq '-6') {
	    $output = 'p6';
	    $OPT_pos = 1;
	}
	elsif ($switch eq '--stab' or $switch eq '-s') {
	    $OPT_stab = 1;
	}
	elsif ($switch eq '--log' or $switch eq '-l') {
	    say @_;
	    $OPT_log = 1;
	}
	elsif ($switch eq '--pos' or $switch eq '-p') {
	    $OPT_pos = 1;	# attach position and prior ws len
	}
	elsif ($switch eq '--match' or $switch eq '-m') {
	    $OPT_match = 1;	# attach match object
	}
	elsif ($switch eq '--help') {
	    USAGE();
	}
    }
#    USAGE() unless -r $_[0];
    my $r;
    if (@_ and -f $_[0]) {
	$r = STD->parsefile($_[0], actions => 'Actions')->{'_ast'};
    }
    else {
	if (not $PROG) {
	    local $/;
	    @ARGV = @_;
	    $PROG = <>;
	}
	$r = STD->parse($PROG, actions => 'Actions')->{'_ast'};
    }
    unless ($OPT_stab) {
	delete $r->{CORE};
	delete $r->{MATCH}{CORE};
    }
    if ($output eq 'ast') {
	print Dump($r);
    }
    elsif ($output eq 'p6') {
	print $r->ret($r->emit_p6);
    }
    elsif ($output eq 'p5') {
	print $r->ret($r->emit_p5(0));
    }
    else {
	die "Unknown output mode";
    }
}

# viv should likely be abstracted into a module instead of doing this hack... - pmurias
sub VIV::SET_OPT {
    my %opt = @_;
    $OPT_pos = $opt{pos};
    $OPT_match = $opt{match};
    $OPT_log = $opt{log};
}

###################################################################

{ package Actions;

    # Generic ast translation done via autoload

    our $AUTOLOAD;
    my $SEQ = 1;

    sub AUTOLOAD {
	my $self = shift;
	my $match = shift;
	my $rule = shift()//0;
	say " for ", $AUTOLOAD, " rule $rule";
	return unless $rule;
	my $r = hoist($match);
	(my $class = $AUTOLOAD) =~ s/^Actions/VAST/;
	$class =~ s/__S_\d\d\d/__/;
	gen_class($class, $match->{O}{kind});
	bless $r, $class unless ref($r) =~ /^VAST/;
	$r->{MATCH} = $match if $OPT_match;
	$match->{'_ast'} = $r;
    }

    # propagate ->{'_ast'} nodes upward
    # (untransformed STD nodes in output indicate bugs)

    sub hoist {
	my $node = shift;
	my $text = $node->Str;
	my %r;
	my @all;
	my @fake;
	for my $k (keys %$node) {
	    #print STDERR $node->{_reduced}, " $k\n";
	    my $v = $node->{$k};
	    if ($k eq 'O') {
		for my $key (keys %$v) {
		    $r{$key} = $$v{$key};
		}
	    }
	    elsif ($k eq 'PRE') {
	    }
	    elsif ($k eq 'POST') {
	    }
	    elsif ($k eq 'SIGIL') {
		$r{SIGIL} = $v;
	    }
	    elsif ($k eq 'sym') {
		if (ref $v) {
		    if (ref($v) eq 'ARRAY') {
			$r{SYM} = ::Dump($v);
		    }
		    elsif (ref($v) eq 'HASH') {
			$r{SYM} = ::Dump($v);
		    }
		    elsif ($v->{_pos}) {
			$r{SYM} = $v->Str;
		    }
		    else {
			$r{SYM} = $v->TEXT;
		    }
		}
		else {
		    $r{SYM} = $v;
		}
	    }
	    elsif ($k eq '_arity') {
		$r{ARITY} = $v;
	    }
	    elsif ($k eq '~CAPS') {
		# print "CAPS ref ". ref($v) . "\n";
		if (ref $v) {
		    for (@$v) {
			next unless ref $_;     # XXX skip keys?
			push @all, $_->{'_ast'};
		    }
		}
	    }
	    elsif ($k eq '_from') {
		if ($OPT_pos) {
		    $r{BEG} = $v;
		    $r{END} = $node->{_pos};
		}
		if (exists $::MEMOS[$v]{'ws'}) {
		    my $wsstart = $::MEMOS[$v]{'ws'};
		    $r{WS} = $v - $wsstart if defined $wsstart and $wsstart < $v
		}
	    }
	    elsif ($k =~ /^[a-zA-Z]/) {
		if (ref($v) eq 'ARRAY') {
		    my $zyg = [];
		    for my $z (@$v) {
			if (ref $z) {
			    if (ref($z) eq 'ARRAY') {
				push @$zyg, $z;
				push @fake, @$z;
			    }
			    elsif (exists $z->{'_ast'}) {
				my $zy = $z->{'_ast'};
				push @fake, $zy;
				push @$zyg, $zy;
			    }
			}
			else {
			    push @$zyg, $z;
			}
		    }
		    $r{$k} = $zyg;
#		    $r{zygs}{$k} = $SEQ++ if @$zyg and $k ne 'sym';
		}
		elsif (ref $v) {
		    if (exists $v->{'_ast'}) {
			push @fake, $v->{'_ast'};
			$r{$k} = $v->{'_ast'};
		    }
		    else {
			$r{$k} = $v;
		    }
#		    $r{zygs}{$k} = $SEQ++;
		    unless (ref($r{$k}) =~ /^VAST/) {
			my $class = "VAST::$k";
			gen_class($class);
			bless $r{$k}, $class unless ref($r{$k}) =~ /^VAST/;
		    }
		}
		else {
		    $r{$k} = $v;
		}
	    }
	}
	if (@all == 1 and defined $all[0]) {
	    $r{'.'} = $all[0];
	}
	elsif (@all) {
	    $r{'.'} = \@all;
	}
	elsif (@fake) {
	    $r{'.'} = \@fake;
	}
	else {
	    $r{TEXT} = $text;
	}
	\%r;
    }

    sub EXPR {
	my $self = shift;
	my $match = shift;
	my $r = hoist($match);
	(my $class = ref $r) =~ s/^STD/VAST/;
#	print STDERR ::Dump($r);
	gen_class($class, $match->{O}{kind});
	$r = bless $r, $class unless ref($r) =~ /^VAST/;
	$match->{'_ast'} = $r;
    }

    sub gen_class {
	my $class = shift;
	my $kind = shift;
	no strict 'refs';
	if (@{$class . '::ISA'}) {
#	    print STDERR "Existing class $class\n" if $OPT_log;
#	    return;
	}
	print STDERR "Creating class $class $kind\n" if $OPT_log;
	if ($kind) {
	    $kind =~ s/STD::/VAST::/;
	    @{$class . '::ISA'} = $kind;
	    @{$kind . '::ISA'} = 'VAST::Base';
	}
	else {
	    @{$class . '::ISA'} = 'VAST::Base';
	}
    }

}

###################################################################

{ package VAST::Base;

    sub ret { my $self = shift;
	my $val = join '', @_;
	my @c = map { ref $_ } @context;
	my $c = "@c " . ref($self);
	$c =~ s/VAST:://g;
	print STDERR "$c returns $val\n" if $OPT_log;
	wantarray ? @_ : $val;
    }

    sub emit_p6 { my $self = shift;
	my $text = '';
	if (exists $self->{'.'}) {
	    my $last = $self->{BEG};
	    my $all = $self->{'.'};
	    my @kids;
	    for my $kid (ref($all) eq 'ARRAY' ? @$all : $all) {
		next unless $kid;
		if (not defined $kid->{BEG}) {
		    $kid->{BEG} = $kid->{_from} // next;
		    $kid->{END} = $kid->{_pos};
		}
		push @kids, $kid;
	    }
	    for my $kid (sort { $a->{BEG} <=> $b->{BEG} } @kids) {
		my $kb = $kid->{BEG};
		if ($kb > $last) {
		    $text .= substr($::ORIG, $last, $kb - $last);
		}
		if (ref($kid) =~ /STD/) {
		    print STDERR ::Dump($self);
		}
		$text .= $kid->emit_p6();
		$last = $kid->{END};

	    }
	    my $se = $self->{END};
	    if ($se > $last) {
		    $text .= substr($::ORIG, $last, $se - $last);
	    }
	    return $self->ret($text);
	}
	else {
	    my $text = $self->{TEXT};
	    return $self->ret($text);
	}
    }

    sub emit_p5 { my $self = shift; my $lvl = shift;
	my @text;
	$context[$lvl] = $self;
	# print STDERR "HERE " . ref($self) . "\n";
	if (exists $self->{'.'}) {
	    my $last = $self->{BEG};
	    my $all = $self->{'.'};
	    my @kids;
	    for my $kid (ref($all) eq 'ARRAY' ? @$all : $all) {
		next unless $kid;
		if (not defined $kid->{BEG}) {
		    $kid->{BEG} = $kid->{_from} // next;
		    $kid->{END} = $kid->{_pos};
		}
		push @kids, $kid;
	    }
	    for my $kid (sort { $a->{BEG} <=> $b->{BEG} } @kids) {
		my $kb = $kid->{BEG};
		if ($kb > $last) {
		    push @text, substr($::ORIG, $last, $kb - $last);
		}
		say STDERR ref($self), " calling ", ref($kid);
		push @text, scalar $kid->emit_p5($lvl+1);
		$last = $kid->{END};

	    }
	    my $se = $self->{END};
	    if ($se > $last) {
		    push @text, substr($::ORIG, $last, $se - $last);
	    }
	}
	else {
	    # print STDERR "OOPS " . ref($self) . " $$self{TEXT}\n";
	    push @text, $self->{TEXT};
	}
	splice(@context,$lvl);
	$self->ret(@text);
    }

}

{ package VAST::TEXT; our @ISA = 'VAST::Base'; }

{ package VAST::Additive; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq '*') {
	    $t[0] = '';
	}
	$self->ret(@t);
    }
}

{ package VAST::apostrophe; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        $self->ret(@t);
    }
}


{ package VAST::arglist; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        $self->ret(@t);
    }
}


{ package VAST::args; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__Bang; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__Bra; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__Cur_Ly; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__DotDotDot; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__method; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__name; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::assertion__Question; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::atom; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Autoincrement; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        $self->ret(@t);
    }
}


{ package VAST::babble; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        $self->ret(@t);
    }
}


{ package VAST::backslash; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__Back; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__d; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__h; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__misc; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__n; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__s; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__stopper; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__t; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__v; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__w; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::backslash__x; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::before; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::block; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::blockoid; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::capterm; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::cclass_elem; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::circumfix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::circumfix__Bra_Ket; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::circumfix__Cur_Ly; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::circumfix__Paren_Thesis; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::circumfix__sigil; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::codeblock; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::colonpair; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Comma; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::comp_unit; our @ISA = 'VAST::Base';
    sub emit_p5 { my $self = shift; my $lvl = shift;
	$context[$lvl] = $self;
	my $r = $self->ret($self->{statementlist}->emit_p5($lvl+1));
	splice(@context,$lvl);
	$r;
    }
    sub emit_p6 { my $self = shift;
	$self->ret($self->{statementlist}->emit_p6);
    }

}

{ package VAST::Concatenation; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[1] eq '~') {
            $t[1] = '.';
        }
        $self->ret(@t);
    }
}


{ package VAST::Conditional; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
	for (@t) {
	    s/\?\?/?/;
	    s/!!/:/;
        }
        $self->ret(@t);
    }
}


{ package VAST::CORE; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::default_value; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::deflongname; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::def_module_name; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::desigilname; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::dotty; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::dotty__Dot; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::dottyop; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::eat_terminator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::escape; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::escape__At; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::escape__Back; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::escape__Dollar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::EXPR; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::fatarrow; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::fulltypename; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::hexint; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::ident; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::identifier; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::index; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::infix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq '+&' or $t[0] eq '~&') {
	    $t[0] = '&';
	}
	elsif ($t[0] eq '+|' or $t[0] eq '~|') {
	    $t[0] = '|';
	}
	$self->ret(@t);
    }
}

{ package VAST::infix__and; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__BangEqual; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__ColonEqual; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq ':=') {
            $t[0] = '=';	# XXX oversimplified
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Comma; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__DotDot; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__eq; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Equal; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__EqualEqual; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__EqualGt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__gt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Gt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infixish; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__le; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__lt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Lt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__LtEqual; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Minus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__ne; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__or; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__orelse; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Plus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__PlusAmp; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq '+&') {
            $t[0] = '&';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix_postfix_meta_operator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix_postfix_meta_operator__Equal; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__QuestionQuestion_BangBang; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        $self->ret(@t);
    }
}


{ package VAST::infix__SlashSlash; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Star; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infixstopper; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__Tilde; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__TildeTilde; our @ISA = 'VAST::Chaining';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	say STDERR 'HERE';
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
	elsif ($t[0] eq '~~') {
	    $t[0] = '=~';
	}
        $self->ret(@t);
    }
}


{ package VAST::infix__VertVert; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::infix__x; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::integer; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Item_assignment; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Junctive_or; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::label; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::lambda; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::left; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::List_assignment; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::litchar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::longname; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Loose_and; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Loose_or; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Loose_unary; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Back; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Bra_Ket; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Caret; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__CaretCaret; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__ColonColon; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__ColonColonColon; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Cur_Ly; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Dollar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__DollarDollar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Dot; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Double_Double; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Lt_Gt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__mod; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Nch; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Paren_Thesis; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__qw; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__sigwhite; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__Single_Single; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::metachar__var; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::method_def; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::Methodcall; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if (@t > 2) {
	    my $first = shift @t;
	    my $second = join '', @t;
	    @t = ($first,$second);
	}
	if ($t[1] eq '.pos') { $t[1] = '.<_pos>'; }
	$t[1] =~ s/^(\.?)<(.*)>$/$1\{'$2'\}/;
	if ($t[0] =~ /^[@%]/) {
	    if ($t[1] =~ s/^\.?([[{])/$1/) {
		if ($t[1] =~ /,/) {
		    substr($t[0],0,1) = '@';
		}
		else {
		    substr($t[0],0,1) = '$';
		}

	    }
	}
	elsif ($t[0] =~ /^\$\w+$/) {
	    $t[1] =~ s/^([[{])/.$1/;
	}
	$t[1] =~ s/^\./->/;
#	print STDERR ::Dump(\@t);
	$self->ret(@t);
    }
}

{ package VAST::methodop; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::modifier_expr; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal__adv; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal__ColonBangs; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal__Coloni; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal__Colonmy; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::mod_internal__Colons; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::module_name; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::module_name__normal; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::morename; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::multi_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::multi_declarator__multi; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::multi_declarator__null; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::multi_declarator__proto; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Multiplicative; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::multisig; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::name; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::named_param; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Named_unary; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::nibbler; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::nofun; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Nonchaining; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::normspace; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::noun; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	# print STDERR "HERE " . ref($self) . "\n";
	my $t = $self->SUPER::emit_p5($lvl+1);
	# print STDERR "$t in " . ref($context[$lvl-1]);
	$self->ret($t);
    }
}

{ package VAST::noun__capterm; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__circumfix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__colonpair; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__fatarrow; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__multi_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__package_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__regex_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__routine_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__scope_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__statement_prefix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__term; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__value; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::noun__variable; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::nulltermish; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::number; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::number__numish; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::numish; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::opener; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::package_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::package_declarator__class; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::package_declarator__grammar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::package_declarator__role; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::package_def; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::parameter; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::param_sep; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::param_var; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::pblock; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::pod_comment; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::POST; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix__Bra_Ket; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix__Cur_Ly; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix__Fre_Nch; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix__Lt_Gt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postcircumfix__Paren_Thesis; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postfix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postfix__MinusMinus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postfix__PlusPlus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postfix_prefix_meta_operator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postfix_prefix_meta_operator__Nch; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::postop; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::PRE; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix__Bang; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix__Minus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix__not; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix__Plus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::prefix__temp; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantified_atom; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantifier; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantifier__Plus; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantifier__Question; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantifier__Star; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantifier__StarStar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quantmod; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quibble; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::quote; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	$t[0] =~ s/</qw</;
#	print STDERR ::Dump(\@t);
	$self->ret(@t);
    }
}

{ package VAST::quote__Double_Double; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quote__Fre_Nch; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quote__Lt_Gt; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quotepair; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quote__s; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quote__Single_Single; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::quote__Slash_Slash; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_block; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_declarator__regex; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_declarator__rule; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_declarator__token; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::regex_def; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Replication; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::right; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::routine_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::routine_declarator__method; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::rxinfix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::rxinfix__Tilde; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::rxinfix__Vert; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::rxinfix__VertVert; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scoped; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scope_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scope_declarator__constant; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scope_declarator__has; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scope_declarator__my; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::scope_declarator__our; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::semiarglist; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::semilist; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sibble; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sigil; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sigil__Amp; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sigil__At; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sigil__Dollar; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sigil__Percent; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sign; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::signature; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::spacey; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::special_variable; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq '$¢') {
	    $t[0] = '$C';
	}
	elsif ($t[0] eq '$/') {
	    $t[0] = '$M';
	}
	$self->ret(@t);
    }
}

{ package VAST::special_variable__Dollar_a2_; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::special_variable__DollarSlash; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__default; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__for; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__given; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__if; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__loop; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__when; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_control__while; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statementlist; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_cond; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_cond__if; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_cond__unless; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_loop; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_loop__for; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_mod_loop__while; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_prefix; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_prefix__do; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::statement_prefix__try; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::stdstopper; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::stopper; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::sublongname; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::subshortname; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Symbolic_unary; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::term__identifier; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__BangBang; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__for; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__if; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__Ket; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__Ly; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__Semi; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__Thesis; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__unless; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::terminator__while; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::termish; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::term; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq 'self') {
	    $t[0] = '$self'
	}
	$self->ret(@t);
    }
}

{ package VAST::term__name; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::term__self; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::term__Star; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::term__undef; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::Tight_or; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::trait; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::trait_auxiliary; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::trait_auxiliary__does; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::trait_auxiliary__is; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::twigil; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq '*') {
	    $t[0] = '::';
	}
	$self->ret(@t);
    }
}

{ package VAST::twigil__Dot; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::twigil__Star; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::type_constraint; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::typename; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::unitstopper; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::unspacey; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::unv; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::val; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::value; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::value__number; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::value__quote; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::variable; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::variable_declarator; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::vws; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}


{ package VAST::ws; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
        my @t = $self->SUPER::emit_p5($lvl+1);
        if ($t[0] eq 'XXX') {
            $t[0] = 'XXX';
        }
        $self->ret(@t);
    }
}



{ package VAST::xblock; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	$t[0] = '(' . $t[0] . ')';
	$t[0] =~ s/(\s+)\)$/)$1/;
	$self->ret(@t);
    }
}

{ package VAST::XXX; our @ISA = 'VAST::Base';
    sub emit_p5 {  my $self = shift; my $lvl = shift;
	my @t = $self->SUPER::emit_p5($lvl+1);
	if ($t[0] eq 'XXX') {
	    $t[0] = 'XXX';
	}
	$self->ret(@t);
    }
}


if ($0 eq __FILE__) {
    ::MAIN(@ARGV);
}

# vim: ts=8 sw=4 noexpandtab smarttab
