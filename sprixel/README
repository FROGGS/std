
sprixel - an anagram of perlsix. viv and STD.pm parse Perl 6 source,
    emitting the Abstract Syntax Tree in YAML, then sprixel walks the
    AST using its trampolined, stackless, continuation-returning
    interpreter written in JavaScript and executed by Google's V8
    compiler and runtime.

requirements:
 - have Perl 5 installed and all of STD5.pmc's and viv's dependencies
   (see pugs/src/perl6/README, you may need to install YAML::Syck,
   YAML::XS (aka libyaml-libyaml-perl) Module::Install, File::Slurp
   and Moose. You may need to perform your local equivalent of
   'sudo ln -s /usr/bin/perl /usr/local/bin/perl')
   Verify that viv produces a valid AST, eg: ./viv -e 'say "hello";'
 - build V8 (Google's BSD-licensed JS engine) from source (optionally install)
    - see http://code.google.com/p/v8/ (download bleeding or trunk)
    - you'll need g++, Python 2.5, scons (latest release candidate)
    - 32-bit: scons
    - 64-bit: export CFLAGS=-fPIC; scons arch=x64
    - sudo ln -s /path/to/my/v8/libv8.a /usr/lib/
    - ********** See detailed installation instructions below **********
 - install the Perl 5 extension for V8 (originally named Acme::JavaScript::V8)
    - see http://github.com/fictorial/perl-v8
    - original: http://d.hatena.ne.jp/dayflower/20080905/1220592409
    - make -f bridge.mk; perl Makefile.PL; make; make test
    - sudo make install
    - perl sample.pl
 - accept some draconian EULA (kidding)

usage:
 - perl sprixel.pl -e 'say "Perl 6 powered by a V8";'
 - perl sprixel.pl ../../t/01-sanity/
 - perl -f sprixel.mk test
 - perl -f sprixel.mk spectest
 - perl sprixel.pl -e 'say(421,510, 3333875928739872 * 5534775873878723587)'
 - etc.

vision:
 - host/backend for Perl 6 on Google's V8 JavaScript VM, linked into perl
   initially to make use of STD5.pmc.
 - may eventually extend/fork V8 to add Perl 6 features/semantics natively, but
   writing the runtime in JavaScript initially (lots of boxing/unboxing, yes).
 - the interpreter will not emit JavaScript source yet... perhaps when it's
   time to make it an optimizing compiler.

plans:
 - write a custom Actions package so 'BEGIN{}' and 'use OtherPackage;' can tell
   the runtime to hook back into the STD parser as needed, and vice versa.
 - implement the metaclass/metaobject protocols/API
 - implement all the builtins. :) or do I repeat myself?
    - note: borrow lots from all the other Perl 6 implementations, of course.

last updated 2009-09-22 - diakopter

If your perl is 64-bit, you'll want to export CFLAGS=-fPIC before building v8
and perl-v8, and build v8 with:  scons arch=x64


07:41 <@diakopter> check out the /bleeding_edge (or /trunk they're both
    very stable) branch from the v8 repo
07:42 <@diakopter> have scons & python 2.5
07:42 <@diakopter> and g++
07:42 < pmurias> diakopter: i saw the readme
07:43 <@diakopter> pmurias: is your perl 64-bit or 32
07:43 < pmurias> i can built it with typing scons, but
    i don't know how to install it
07:43 < pmurias> 32-bit
07:44 <@diakopter> copy or ln -s the libv8.a to /usr/local/lib/
07:44 <@diakopter> easiest
07:44 < pmurias> that could be put in the readme
07:44 <@diakopter> then git clone the perl-v8 repo
07:44 <@diakopter> it's a few KB
07:45 <@diakopter> cd perl-v8 ; make -f bridge.mk
07:45 <@diakopter> perl Makefile.PL
07:45 <@diakopter> make && make test && make install
07:46  * diakopter pastes into README
