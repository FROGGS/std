
sprixel (anagram of perlsix): viv and STD.pm parse Perl 6 source,
    emitting an Abstract Syntax Tree in YAML, then sprixel walks the
    AST using its trampolined, stackless, continuation passing style
    interpreter written in JavaScript and executed by Google's V8
    JavaScript compiler and runtime engine.

installation:

 - have Perl 5 installed and all of STD5.pmc's and viv's dependencies.
   See pugs/src/perl6/README. You may need to install YAML::Syck,
   YAML::XS (aka libyaml-libyaml-perl) Module::Install, File::Slurp
   and Moose. You may also need to perform your local equivalent of
   'sudo ln -s /usr/bin/perl /usr/local/bin/perl'.
   Verify that viv produces a valid AST, eg: ./viv -e 'say "hello";'

 - build V8 (Google's BSD-licensed JS engine) from source
    - see http://code.google.com/p/v8/ (download bleeding or trunk)
    - you'll need g++, Python 2.5, scons (latest release candidate)
    - 32-bit: scons
    - 64-bit: export CXXFLAGS=-fPIC; scons arch=x64
    - sudo ln -s /path/to/v8/libv8.a /usr/lib/       # or /usr/local/lib
    - sudo ln -s /path/to/v8/include/v8.h /usr/include/

 - install the Perl 5 extension for V8 (originally named Acme::JavaScript::V8)
    - git clone http://github.com/fictorial/perl-v8.git perl-v8
    - make -f bridge.mk; perl Makefile.PL; make; make test
    - sudo make install
    - perl sample.pl
    - japanese docs: http://d.hatena.ne.jp/dayflower/20080905/1220592409

 - accept some draconian EULA (kidding)

usage:
 - perl sprixel.pl -e 'say "Perl 6 powered by a V8";'
 - perl sprixel.pl ../../t/01-sanity/
 - perl -f sprixel.mk test
 - perl -f sprixel.mk spectest
 - perl sprixel.pl -e 'say(421,510, 3333875928739872 * 5534775873878723587)'
 - etc.

vision:
 - host/backend for Perl 6 on Google's V8 JavaScript VM, linked into perl
   initially to make use of STD5.pmc.
 - may eventually extend/fork V8 to add Perl 6 features/semantics natively, but
   writing the runtime in JavaScript initially (lots of boxing/unboxing, yes).
 - the interpreter will not emit JavaScript source yet... perhaps when it's
   time to make it an optimizing compiler.

plans:
 - write a custom Actions package so 'BEGIN{}' and 'use OtherPackage;' can tell
   the runtime to hook back into the STD parser as needed, and vice versa.
 - implement the metaclass/metaobject protocols/API
 - implement all the builtins. :) or do I repeat myself?
    - note: borrow lots from all the other Perl 6 implementations, of course.

